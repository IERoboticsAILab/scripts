* Post-install scripts (April 25)

** post-install > shell

Assume:
- `[uname]` is your LDAP username.
- Robotics lab network access is NECESSARY for access to your file system and LDAP users

> [!IMPORTANT]
> The new default administrative user which does not rely on network access is called `failsafe`, this users home directory is mounted at `/var/local/failsafe/` - the password can be found in the credentials list.

---

1. Have `curl` installed on your system.

```bash
wget https://raw.githubusercontent.com/IE-Robotics-Lab/scripts/main/setup/setup.sh -O setup.sh && chmod +x setup.sh && sudo ./setup.sh
```

When prompted for the **BECOME password**, enter your user password to allow the script to run with `sudo` permissions.

> [!WARNING]
> Once you execute the script as root, all the existing home directory data will be removed.

4. Once the script is ready, enter root and execute with the first 2 commands given below. You will be prompted for inputting some few details as the packages get installed, this information is also given below. You will be prompted for the LDAP password, if you do not have it, you cannot run the script.
	1. `sudo su`
	2. `bash setup.sh`
		1. **LDAP Server**: `ldap://10.205.1.2`
		2. **LDAP Base DN**: `dc=colossus`
		3. **SELECT:** passwd,group,shadow
		4. When at _PAM configuration_ do not select anything and just hit OK
5. Now that all is setup and the script does not show any errors, some parts of the system may freeze right after installation, it is important to reboot the machine before any further work is done.


#+begin_src bash :tangle setup/setup.sh
#!/bin/bash

# Define variables
GITHUB_REPO="https://github.com/IE-Robotics-Lab/scripts"
ANSIBLE_PACKAGES="setup/packages.yml"
ANSIBLE_PATH="setup/ansible.sh"
DNS_ENABLE_SCRIPT="https://raw.githubusercontent.com/IE-Robotics-Lab/scripts/main/ubuntu_enable_local_dns.sh"
ADD_STUDENT_SCRIPT="https://raw.githubusercontent.com/IE-Robotics-Lab/scripts/main/setup/adduser.sh"
ANSIBLE_SSH="setup/services/ssh.yml"
LDAP_URI="ldap://10.205.10.3/"
BASE_DN="dc=prometheus,dc=lab"
BIND_DN="cn=admin,dc=prometheus,dc=lab"
NFS_SERVER="10.205.10.3"
NFS_HOME="/homes"
PAST_ADMIN="admin"
LOCAL_USER="failsafe"
LOCAL_PASS="oopsmybad"

# Function to handle errors
die() {
    echo "$1" >&2
    exit 1
}

# Backup original configuration files
echo "Backing up original configuration files..."
cp /etc/nsswitch.conf /etc/nsswitch.conf.bak
cp /etc/pam.d/common-auth /etc/pam.d/common-auth.bak
cp /etc/pam.d/common-account /etc/pam.d/common-account.bak
cp /etc/pam.d/common-session /etc/pam.d/common-session.bak
cp /etc/pam.d/common-password /etc/pam.d/common-password.bak
cp /etc/auto.master /etc/auto.master.bak
cp /etc/auto.home /etc/auto.home.bak
cp /etc/sudoers /etc/sudoers.bak

sudo apt install curl libnss-ldapd libpam-ldapd nscd nslcd autofs ansible -y || die "Failed to install curl."

####### PACKAGES SETUP #######
read -r -p "Would you like to install Ansible packages? (y/n)" response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    ####### ANSIBLE SETUP #######
    echo "Installing Ansible..."
    curl -s https://raw.githubusercontent.com/IE-Robotics-Lab/scripts/master/$ANSIBLE_PATH | bash
    ansible-pull -U $GITHUB_REPO -i "localhost," -c local -K $ANSIBLE_PACKAGES || die "Failed to install Ansible."
    ansible-pull -U $GITHUB_REPO -i "localhost," -c local -K $ANSIBLE_SSH || die "Failed to run Ansible playbook."
    echo "Ansible installed!"
else
    echo "Skipping ROS and Ansible installation."
fi

####### DNS SETUP #######
echo "Testing local DNS resolution..."
ping prometheus -c 5 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    read -r -p "Local DNS resolution is not working. Would you like to set up a local DNS server? (y/n)" response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo "Enabling local DNS resolution..."
        curl -s "$DNS_ENABLE_SCRIPT" | bash || die "Failed to enable local DNS resolution."
        echo "Waiting for DNS to update..."
        sleep 5
    else
        echo "Skipping DNS setup."
    fi
fi

####### LDAP CONFIGURATION #######
echo "Configuring LDAP..."
read -p "Enter the LDAP bind password: " BIND_PW
ldapsearch -x -D "$BIND_DN" -w "$BIND_PW" -b "$BASE_DN" -H "$LDAP_URI" > /dev/null || die "Invalid LDAP credentials."

cat > /etc/nslcd.conf <<EOF
uid nslcd
gid nslcd
uri $LDAP_URI
base $BASE_DN
binddn $BIND_DN
bindpw $BIND_PW
EOF

sudo pam-auth-update || die "Failed to configure PAM for LDAP."

# Restart services
echo "Restarting LDAP services..."
systemctl restart nslcd nscd || die "Failed to restart LDAP services."

####### PAM CONFIGURATION #######
echo "Configuring PAM for LDAP Authentication..."
sudo sed -i 's/^passwd:.*/passwd:         compat ldap/' /etc/nsswitch.conf
sudo sed -i 's/^group:.*/group:          compat ldap/' /etc/nsswitch.conf
sudo sed -i 's/^shadow:.*/shadow:         compat ldap/' /etc/nsswitch.conf

####### NFS CONFIGURATION #######
echo "Configuring AutoFS and NFS for home directories..."
grep -q "^/home" /etc/auto.master || echo "/home /etc/auto.home" >> /etc/auto.master
echo "* -fstype=nfs,rw $NFS_SERVER:$NFS_HOME/&" > /etc/auto.home
systemctl restart autofs || die "Failed to restart autofs."

# Ensure home directory is owned by 'lab'
[ "$(stat -c %U /home)" != "$PAST_ADMIN" ] && chown -R lab /home

####### USER MANAGEMENT #######
# Add 'lab' to sudoers
grep -q "^lab" /etc/sudoers || echo "lab ALL=(ALL:ALL) ALL" >> /etc/sudoers
grep -q "^%SUDOers" /etc/sudoers || echo "%SUDOers ALL=(ALL:ALL) ALL" >> /etc/sudoers

# Create failsafe user if not exists
grep -q "^$LOCAL_USER" /etc/passwd || useradd -m $LOCAL_USER -d /var/local/$LOCAL_USER -s /bin/bash -p "$(openssl passwd -1 $LOCAL_PASS)" -G sudo

# Remove past admin user
grep -q "^$PAST_ADMIN" /etc/passwd && userdel -r $PAST_ADMIN

####### TESTING #######
echo "Testing LDAP and NFS configuration..."
getent passwd | grep ldap >/dev/null && echo "LDAP configuration successful." || echo "LDAP configuration failed."
ls /home >/dev/null && echo "NFS mount successful." || echo "NFS mount failed."

echo "Setup complete! LDAP users should now be able to log in and access their NFS home directories."

####### ADD STUDENT USER #######
read -r -p "Would you like to add a student user? (y/n)" response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Running adduser.sh script..."
    curl -s "$ADD_STUDENT_SCRIPT" | bash || die "Failed to add student user."
else
    echo "Skipping student user creation."
fi

sudo reboot
#+end_src


#+begin_src bash :tangle setup/ansible.sh
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt-get update -y
sudo apt-get install -y ansible

# Ensure Git is installed
sudo apt-get install -y git

#+end_src

*** shell > hostname

#+begin_src bash tangle: setup/services/hosts.sh
#!/bin/bash

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  echo "Please run this script as root."
  exit 1
fi

# Check if a new hostname is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <new-hostname>"
  exit 1
fi

NEW_HOSTNAME=$1

# Update /etc/hostname
echo "$NEW_HOSTNAME" > /etc/hostname

# Update /etc/hosts
sed -i "s/^127\.0\.1\.1\s.*/127.0.1.1 $NEW_HOSTNAME/" /etc/hosts

# Apply the new hostname
hostnamectl set-hostname "$NEW_HOSTNAME"

# Confirm the change
echo "Hostname successfully changed to: $NEW_HOSTNAME"
#+end_src


*** shell > use network manager instead of systemd-resolved for DNS

#+begin_src bash :tangle ubuntu_enable_local_dns.sh
#!/bin/bash

# Disable and stop systemd-resolved
sudo systemctl disable systemd-resolved
sudo systemctl stop systemd-resolved

# Backup NetworkManager.conf
cp /etc/NetworkManager/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf.bak

# Update DNS setting in NetworkManager.conf
if ! grep -q "dns=10.205.10.2" /etc/NetworkManager/NetworkManager.conf; then
    line_number=$(grep -n "\[main\]" /etc/NetworkManager/NetworkManager.conf | cut -d: -f1)
    sed -i "$line_number a dns=10.205.10.2" /etc/NetworkManager/NetworkManager.conf
fi

# Backup and remove resolv.conf
cp /etc/resolv.conf /etc/resolv.conf.bak
rm -f /etc/resolv.conf

# Restart NetworkManager
sudo systemctl restart NetworkManager

#+end_src

*** shell > local users

#+begin_src bash :tangle setup/services/adduser.sh
# Create the /local directory and set permissions
sudo mkdir /local
sudo chmod 755 /local
sudo chown root:root /local

# Modify the adduser default configuration to change the home directory base
sudo sed -i 's|DHOME=/home|DHOME=/local|' /etc/adduser.conf

# Add the student user with a specified home directory and GECOS information
sudo adduser --home /local/student --gecos "Student Guest" student <<EOF

EOF

# Retrieve the hostname
HOSTNAME=$(hostname)

# Set the student's password to the hostname
echo "student:$HOSTNAME" | sudo chpasswd

# Output a message indicating the password has been set
echo "Password for user 'student' has been set to the hostname: $HOSTNAME"
#+end_src


*** shell > setup home directory attributes

#+begin_src bash :tangle setup/services/sync_directories.sh
#!/bin/bash

# Script to sync home directory permissions and ownership based on LDAP configuration

# Function to apply ownership and permissions
sync_directory() {
    local dir=$1
    local user=$2
    local group=$3
    local permissions=$4

    echo "Updating $dir..."
    sudo chown -R "$user":"$group" "$dir"
    sudo chmod "$permissions" "$dir"
}

# Sync directories based on the given mapping
#  sync_directory /home/cgomez cgomez 1000000 755
# sync_directory /home/edu edu 1000000 755
# sync_directory /home/forfaly forfaly 1000000 755
# sync_directory /home/gringo gringo 1000000 755
# sync_directory /home/haxybaxy haxybaxy 1000000 755
# sync_directory /home/luis luis 1000000 755
# sync_directory /home/paches paches 1000000 755
# sync_directory /home/rodrigo rodrigo 1000000 755
# sync_directory /home/Suzan suzan 1000000 755
# sync_directory /home/velocitatem velocitatem 1000000 755
sync_directory /home/lab lab 1000000 755


# Verify the changes
echo "Verification of changes:"
ls -la /home
#+end_src

*** shell > LDAP authentication

#+begin_src bash :tangle setup/services/LDAP.sh
#!/bin/bash

# make a backup of the original files before modifying them
cp /etc/nsswitch.conf /etc/nsswitch.conf.bak
cp /etc/pam.d/common-auth /etc/pam.d/common-auth.bak
cp /etc/pam.d/common-account /etc/pam.d/common-account.bak
cp /etc/pam.d/common-session /etc/pam.d/common-session.bak
cp /etc/pam.d/common-password /etc/pam.d/common-password.bak
cp /etc/auto.master /etc/auto.master.bak
cp /etc/auto.home /etc/auto.home.bak
cp /etc/sudoers /etc/sudoers.bak


# Install necessary packages
echo "Installing necessary packages..."
apt-get update && apt-get install -y libnss-ldapd libpam-ldapd nscd nslcd autofs
# automatically adds ldap to nsswitch.conf


# Variables
LDAP_URI="ldap://10.205.10.3/"
BASE_DN="dc=prometheus,dc=lab"
BIND_DN="cn=admin,dc=prometheus,dc=lab"
# prompt for the password -s can sometimes be an ilegal option
read -p "Enter the LDAP bind password: " BIND_PW
# check if the password is correct
ldapsearch -x -D $BIND_DN -w $BIND_PW -b $BASE_DN -H $LDAP_URI > /dev/null
if [ $? -ne 0 ]; then
    echo "Invalid password"
    exit 1
fi
NFS_SERVER="10.205.10.3"  # Replace with your NFS server IP or hostname
NFS_HOME="/homes"  # Replace with the NFS shared directory for home directories
PAST_ADMIN="lab"


# Configure nslcd for LDAP
echo "Configuring LDAP..."
cat > /etc/nslcd.conf <<EOF
uid nslcd
gid nslcd
uri $LDAP_URI
base $BASE_DN
binddn $BIND_DN
bindpw $BIND_PW
EOF

# PAM configuration for LDAP Authentication
echo "Configuring PAM for LDAP Authentication..."

sudo pam-auth-update

# Restart nslcd and nscd to apply changes
echo "Restarting services..."
systemctl restart nslcd
systemctl restart nscd


# make lab sudo
# check if lab exists in /etc/sudoers
grep -q "^lab" /etc/sudoers
if [ $? -ne 0 ]; then
    echo "lab ALL=(ALL:ALL) ALL" >> /etc/sudoers
fi

# also add "SUDOers" group to sudoers file if it is not already present
grep -q "^%SUDOers" /etc/sudoers
if [ $? -ne 0 ]; then
    echo "%SUDOers ALL=(ALL:ALL) ALL" >> /etc/sudoers
fi

# make lab the owner of /home if it is not already
if [ $(stat -c %U /home) != "lab" ]; then
    chown -R lab /home
fi

# create failsafe user
LOCAL_USER="failsafe"
LOCAL_PASS="oopsmybad"
# check if users exists or not

grep -q "^$LOCAL_USER" /etc/passwd
if [ $? -ne 0 ]; then
    echo "Creating failsafe user..."
    useradd -m $LOCAL_USER -d /var/local/$LOCAL_USER -s /bin/bash -p $(openssl passwd -1 $LOCAL_PASS) -G sudo
    chown -R $LOCAL_USER /var/local/$LOCAL_USER
fi

# remove past admin user if it exists
grep -q "^$PAST_ADMIN" /etc/passwd
if [ $? -eq 0 ]; then
    echo "Removing past admin user..."
    userdel -r $PAST_ADMIN
fi


# Configure autofs
echo "Configuring AutoFS..."
# if not already present, add the following line to /etc/auto.master
grep -q "^/home" /etc/auto.master
if [ $? -ne 0 ]; then
    echo "/home /etc/auto.home" >> /etc/auto.master
fi
if [ ! -f /etc/auto.home ]; then
    touch /etc/auto.home
    echo "* -fstype=nfs,rw $NFS_SERVER:$NFS_HOME/&" > /etc/auto.home
fi

# Restart autofs to apply the configuration
systemctl restart autofs

echo "Configuration complete. LDAP users should now be able to log in and access their NFS home directories."

#+end_src

** postinstall > ansible

*** ansible > How to pull ansible playbooks

1. Find the playbook you want to pull on the repository. Get the URL of the playbook.
2. Use the `ansible-pull` command to pull the playbook from the URL.

#+begin_src bash
BOOK="path/to/playbook.yml"
ansible-pull -U https://github.com/IE-Robotics-Lab/ -i "localhost," -c local -K $BOOK
#+end_src  

*** ansible > sudoers

#+begin_src yaml :tangle setup/configure_sudoers.yml
---
- name: Ensure %SUDOers line is present in /etc/sudoers
  hosts: all
  become: yes
  tasks:
    - name: Check if %SUDOers line is present
      command: grep -q "^%SUDOers" /etc/sudoers
      register: sudoers_check
      ignore_errors: true

    - name: Add %SUDOers line if not present
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%SUDOers'
        line: '%SUDOers ALL=(ALL:ALL) ALL'
      when: sudoers_check.rc != 0

#+end_src

*** ansible > use network manager instead of systemd-resolved for DNS

#+begin_src yaml :tangle ubuntu_enable_local_dns.yml
---
- name: Disable and stop systemd-resolved
  hosts: all
  become: yes

  tasks:
    - name: Disable systemd-resolved
      ansible.builtin.systemd:
        name: systemd-resolved
        enabled: no
        state: stopped

    - name: Ensure dns=default is in NetworkManager.conf
      ansible.builtin.lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        regexp: '^dns=default$'
        line: 'dns=default'
        insertbefore: '^\\[main\\]'

    - name: Backup resolv.conf
      ansible.builtin.copy:
        src: /etc/resolv.conf
        dest: /etc/resolv.conf.bak
        backup: yes

    - name: Remove resolv.conf
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: absent

    - name: Restart NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        state: restarted

#+end_src

*** ansible > packages

#+begin_src yaml :tangle setup/packages.yml
---
- name: Ensure key packages are installed
  hosts: all
  become: yes

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install essential packages
      apt:
        name:
          - vim
          - git
          - curl
          - wget
          - net-tools
        state: present

    - name: Install Python and pip
      apt:
        name:
          - python3
          - python3-pip
        state: present

    - name: Ensure pip is up to date
      pip:
        name: pip
        state: latest
        executable: pip3

    - name: Install Python packages
      pip:
        name:
          - virtualenv
          - numpy
          - pandas
        state: present
        executable: pip3

    - name: Install Docker
      apt:
        name: docker.io
        state: present
- name: Install ROS Noetic on Ubuntu
  hosts: all
  become: yes

  tasks:
    - name: Ensure required Ubuntu repositories are enabled
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ item }} main restricted universe multiverse"
        state: present
      loop:
        - focal
        - focal-updates
        - focal-security

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install curl
      apt:
        name: curl
        state: present

    - name: Add ROS GPG key
      apt_key:
        url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc
        state: present

    - name: Add ROS repository to sources list
      apt_repository:
        repo: "deb http://packages.ros.org/ros/ubuntu {{ ansible_distribution_release | lower }} main"
        state: present

    - name: Update apt cache after adding ROS repository
      apt:
        update_cache: yes

    - name: Install ROS Noetic Desktop-Full
      apt:
        name: ros-noetic-desktop-full
        state: present

    - name: Install additional ROS dependencies
      apt:
        name:
          - python3-rosdep
          - python3-rosinstall
          - python3-rosinstall-generator
          - python3-wstool
          - build-essential
        state: present

    - name: Initialize rosdep
      command: rosdep init
      args:
        creates: /etc/ros/rosdep/sources.list.d/20-default.list

    - name: Update rosdep
      command: rosdep update

    - name: Source ROS setup.bash in bashrc
      lineinfile:
        path: ~/.bashrc
        line: "source /opt/ros/noetic/setup.bash"
        state: present

    - name: Source ROS setup.bash for current session
      shell: source /opt/ros/noetic/setup.bash
      args:
        executable: /bin/bash

    - name: Install VNC
      apt:
        name:
          - tigervnc-standalone-server
        state: present

#+end_src


*** ansible > xRDP

#+begin_src yaml :tangle setup/services/xrdp.yml
---
- name: Install xrdp and configure polkit
  hosts: all
  become: yes

  tasks:
    - name: Install xrdp
      apt:
        name: xrdp
        state: present
        update_cache: yes

    - name: Ensure /etc/polkit-1/localauthority/50-local.d directory exists
      file:
        path: /etc/polkit-1/localauthority/50-local.d
        state: directory
        mode: '0755'

    - name: Create /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
      copy:
        dest: /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        content: |
          [Allow Colord all Users]
          Identity=unix-user:*
          Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
          ResultAny=no
          ResultInactive=no
          ResultActive=yes
        mode: '0644'

#+end_src

*** ansible > services > SSH

#+begin_src yaml :tangle setup/services/ssh.yml
---
- name: Install, configure, and enable SSH server
  hosts: all
  become: yes
  tasks:
    - name: Ensure SSH package is installed (Debian/Ubuntu)
      apt:
        name: openssh-server
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure SSH package is installed (RedHat/CentOS)
      yum:
        name: openssh-server
        state: present
      when: ansible_os_family == "RedHat"

    - name: Ensure SSH configuration file is backed up
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.bak
        remote_src: yes
      notify: Restart SSH

    - name: Configure SSH to disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      notify: Restart SSH

    - name: Configure SSH to use key-based authentication only
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
      notify: Restart SSH

    - name: Ensure SSH service is enabled and started (Debian/Ubuntu)
      service:
        name: ssh
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    - name: Ensure SSH service is enabled and started (RedHat/CentOS)
      service:
        name: sshd
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"

  handlers:
    - name: Restart SSH
      service:
        name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
        state: restarted

#+end_src



